@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:string';
@use '../../../react-cdk' as cdk;
@use '../global';
@use './private';


// @include private-style(background, ((color, primary, default)), $material-lite);
// @include private-style(
//   (background: [background], color: [primary-default]),
//   ((background, background), (color, primary, default)),
//   $material-lite
// );
@mixin private-style($style, $paths-list, $ml) {
  $style-is-map: true;

  @if meta.type-of($style) != map {
    $paths-list: list.nth($paths-list, 1);
    $style-is-map: false;
  }

  $first-path: list.nth($paths-list, 1);
  $fixed-paths: null;
  @if meta.type-of($first-path) == string {
    $fixed-paths: $first-path;
    $paths-list: cdk.private-remove-nth($paths-list, 1);
  }

  @include private.for-each-theme($fixed-paths, $paths-list, $ml) using ($data...) {
    $colors: cdk.private-remove-nth($data, 1, 2);

    $index: 0;
    @each $color in $colors {
      // $paths-list.length == $colors.length
      @if $style-is-map {
        $index: $index + 1;

        @each $key, $value in $style {
          $unbroken: true;

          $value: '#{$value}';
      
          $context: if($index == 1, '[color]', '[color-#{$index}]');
          @if string.index($value, $context) {
            $value: cdk.private-replace-string($value, $context, '#{$color}');
            #{$key}: string.unquote($value);
            $unbroken: false;
          }
      
          @if $unbroken {
            $paths: list.nth($paths-list, $index);

            $context: if(
              meta.type-of($paths) == list,
              '[#{list.nth($paths, -2)}-#{list.nth($paths, -1)}]',
              '[#{$paths}]'
            );
      
            @if string.index($value, $context) {
              $value: cdk.private-replace-string($value, $context, '#{$color}');
              #{$key}: string.unquote($value);
            }
          }
        }

      } @else {
        @each $key in $style {
          #{$key}: $color;
        }
      }
    }
  }
}
// @include private-style(
//   (color: [foreground-text], border: 1px solid [primary-default]),
//   ((foreground, text), (color, primary, default)),
// );
@mixin style($style, $paths-list...) {
  @include private-style($style, $paths-list, global.$material-lite);
}


// @include style-zone() using ($color) { ... }
@mixin private-style-zone($paths-list, $ml) {
  $first-path: list.nth($paths-list, 1);
  $fixed-paths: null;
  @if meta.type-of($first-path) == string {
    $fixed-paths: $first-path;
    $paths-list: cdk.private-remove-nth($paths-list, 1);
  }

  @include private.for-each-theme($fixed-paths, $paths-list, $ml) using ($data...) {
    $colors: cdk.private-remove-nth($data, 1, 2);
    @content($colors...);
  };
}
@mixin style-zone($paths-list...) {
  @include private-style-zone($paths-list, global.$material-lite) using ($colors...) {
    @content($colors...);
  }
}


// @include private-zone(typography, $material-lite) using ($typography) { ... }
// @include zone((background, color), $material-lite) using ($background, $color) { ... }
@mixin private-zone($keys, $ml) {
  @include private.for-each-theme($ml: $ml) using ($selector, $config, $theme) {
    $contents: ();

    $theme: map.set($theme, selector, $selector);
    $theme: map.set($theme, global-config, $config);

    @each $key in $keys {
      $contents: list.append($contents, map.get($theme, $key));
    }

    @content($contents...);
  }
}

// @include zone(color, global-config, config) using ($color, $global-config, $config) {...}
@mixin zone($keys...) {
  @include private-zone($keys, global.$material-lite) using ($data...) {
    @content($data...);
  };
}


@function _data-to-contents($data, $keys) {
  $contents: (list.nth($data, -1));

  @each $key in $keys {
    $contents: list.append(
      $contents,
      list.nth($data, list.index($data, $key))
    );
  }

  @return $contents;
}

// @include private-palette-zone($material-lite) using ($theme) { ... }
// @include private-palette-zone((selector, config), $material-lite) using ($theme, $selector, $config) { ... }
@mixin private-theme-zone($keys, $ml) {
  @include private.for-each-theme($ml: null) using ($data...) {
    @content(_data-to-contents($data, $keys)...);
  }
}

// @include private-palette-zone() using ($theme) { ... }
// @include private-palette-zone(selector, config) using ($theme, $selector, $config) { ... }
@mixin theme-zone($keys...) {
  @include private-theme-zone($keys, global.$material-lite) using ($data...) {
    @content($data...);
  }
}



// @include private-palette-zone($material-lite) using ($palette) { ... }
// @include private-palette-zone((selector, name), $material-lite) using ($palette, $selector, $name) { ... }
@mixin private-palette-zone($keys, $ml) {
  @include private.for-each-theme-color(null, $ml) using ($data...) {
    @content(_data-to-contents($data, $keys));
  }
}

// @include palette-zone() using ($palette) { ... }
// @include palette-zone(selector, name) using ($palette, $selector, $name) { ... }
@mixin palette-zone($keys...) {
  @include private-palette-zone($keys, global.$material-lite) using ($data...) {
    @content($data...);
  };
}