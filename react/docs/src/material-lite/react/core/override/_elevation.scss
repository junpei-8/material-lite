@use 'sass:map';
@use 'sass:list';
@use '../../../react-cdk' as cdk;
@use '../global';
@use '../theming/private';

@mixin _for-each-elevation-theme($ml) {
  @include private.should-for-each-theme($ml) using ($ml) {
    $default-theme: map.get($ml, default) or ();
    $default-config: private.merge-theme-config($ml, $default-theme) or ();

    @each $selector, $theme in map.remove($ml, config) {
      $is-default: true;
      $config: private.merge-theme-config($ml, $theme);

      $def-theme: ();
      $def-config: ();
      @if $selector != default {
        $def-theme: $default-theme;
        $def-config: $default-config;
        $is-default: false;
      }

      $color: map.get($config, elevation, color);
      @if $color == map.get($def-config, elevation, color) {

        $color: map.get($theme, foreground, elevation);
        @if $color == map.get($def-theme, foreground, elevation) {
          $color: null;
        };
      }

      $opacity: map.get($config, elevation, opacity);
      @if $opacity == map.get($def-config, elevation, opacity) {
        $opacity: null;
      }

      @if $is-default {
        @content($color, $opacity);
    
      } @else if & {
        #{$selector} & {
          @content($color, $opacity);
        }
    
      } @else {
        #{$selector} {
          @content($color, $opacity);
        }
      }
    }
  }
}


@mixin zone($color: null, $opacity: null, $ml: null) {
  @if $color and $opacity {
    @content($color, $opacity);

  } @else {
    @include _for-each-elevation-theme($ml) using ($theme-color, $theme-opacity) {
      @if $theme-color or $theme-opacity {
        @content(
          $theme-color   or $color   or cdk.$elevation-color,
          $theme-opacity or $opacity or cdk.$elevation-opacity
        );
      }
    }
  }
}

@mixin elevation($z-index, $color: null, $opacity: null, $ml: null) {
  @include zone($color, $opacity, $ml) using ($color, $opacity) {
    @include cdk.elevation($z-index, $color, $opacity);
  }
}


@mixin overridable-elevation($z-index, $color: null, $opacity: null, $ml: null) {
  &:not([class*='ml-elevation-z']) {
    @include elevation($z-index, $color, $opacity, $ml);
  }
}

$default-config: (
  elevation: (
    transition-duration: cdk.$elevation-transition-duration,
    transition-timing-function: cdk.$elevation-transition-timing-function,
  )
);
@mixin transition-zone($duration: null, $timing-function: null, $custom-default-config: null, $ml: null) {
  @if $duration and $timing-function {
    @content($duration, $timing-function);

  } @else {
    $default-config: $custom-default-config or $default-config;
    @include private.for-each-theme-config(elevation, (transition-duration, transition-timing-function), $default-config, $ml)
    using ($_, $__, $theme-duration, $theme-timing-function) {
      @if $theme-duration or $theme-timing-function {
        $duration:        $theme-duration        or $duration;
        $timing-function: $theme-timing-function or $timing-function;
        @content(
          cdk.transition-duration($duration),
          cdk.transition-timing-function($timing-function)
        );
      }
    }
  }
}

@mixin transition($duration: null, $timing-function: null, $default-config: null, $ml: null) {
  @include transition-zone($duration, $timing-function, $default-config, $ml) using ($duration, $timing-function) {
    transition: box-shadow $duration $timing-function;
  }
}


@mixin hierarchy($color: null, $opacity: null, $ml: null) {
  @for $i from 1 through cdk.$z-index-limit {
    .ml-elevation-z#{$i} {
      @include elevation($i, $color, $opacity, $ml);
    }
  }
}
