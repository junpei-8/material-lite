@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:string';


// Polyfill
$_div-exists: meta.function-exists('div', 'math');
@function div($a, $b) {
  @if ($_div-exists) {
    @return math.div($a, $b);

  } @else {
    @return $a / $b;
  }
}

$_slash-exists: meta.function-exists('slash', 'list');
@function slash($a, $b) {
  @if ($_slash-exists) {
    @return list.slash($a, $b);

  } @else {
    @return #{$a}#{' / '}#{$b};
  }
}

// Original methods
@function is-empty($value) {
  @if $value {
    @each $_ in $value {
      @return false;
    }

    @return true;
  }

  @return false;
}


@function unquote-map($map) {
  @each $key, $value in $map {
    @if (meta.type-of($value) == string) {
      $map: map.set($map, $key, unquote($value));
    }
  }

  @return $map;
}


// ref: https://pentzzsolt.medium.com/a-non-destructive-map-merge-function-for-sass-f91637f87b2e
// ref(source): https://github.com/sass/dart-sass/blob/a10d7c677dd90f9f5731fa220d1553af620bedea/lib/src/functions/map.dart
@function deep-merge-map($map1, $map2) {
	$result: $map1;

  @each $key, $value in $map2 {
    $value-type: meta.type-of($value);
    $result-value: map-get($result, $key);

    @if ($value-type == map or $value-type == list) and $value-type == type-of($result-value) {
      $value: if(
        $value-type == map,
        deep-merge($result-value, $value),
        list.join($result-value, $value, comma)
      );
    }

    $result: map.set($result, $key, $value);
  }

  @return $result;
}

@function remove-nth($list, $start, $end: 1) {
  $result: ();
  $length: list.length($list);

  // $index: $start + $end;
  $start: if($start > 0, $start, $length + $start + 1);
  
  @if $end > 0 {
    $end: $start + $end;
    $start: $start - 1;
  } @else {
    // $end: $start - $end + 1;
    $start: $start + $end;
    $end: $start - $end + 1;
  }
  
  @for $i from 1 through $length {
    @if not ($start < $i and $i < $end) {
      $result: list.append($result, list.nth($list, $i));
    }
  }

  @return $result;
}

@function remove-list($list, $values...) {
  @each $value in $values {
    $result: ();
    $len: list.length($list);

    @for $i from 1 through $len {
      $val: list.nth($list, $i);
      @if $value != $val {
        $result: list.append($result, $val);
      }
    }

    $list: $result;
  }

  @return $list;
}

@function replace-string($string, $search, $replace, $all: true) {
  $index: string.index($string, $search);

  @while $index != null {
    $string-len: string.length($search);
    $start: string.slice($string, 0, $index - 1);
    $end: string.slice($string, $index + $string-len);
    $string: $start + $replace + $end;

    $index: if($all, string.index($string, $search), null);
  }

  @return $string;
}

// Return changed opacity value
@function adjust-opacity($color, $opacity) {
  @if string.index('#{$color}', 'rgb') {
    @return rgba(red($color), green($color), blue($color), $opacity);

  } @else {
    @return rgba($color, $opacity);
  }
}

@function multiple-properties($prop) {
  @if meta.type-of($prop) == string {
    @return $prop;

  } @else {
    $result: '';

    @each $value in $prop {
      $result: $result + ',' + $value;
    }

    @return string.slice($result, 1);
  }
}
