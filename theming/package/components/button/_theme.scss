@use 'sass:color';
@use 'sass:map';
@use 'sass:meta';
@use '../../cdk';
@use '../../utils';
@use '../theming/private';
@use '../core/override/private-elevation';


@mixin foreground($foreground: null, $ml: null) {
  $ml: private.create-ml-map(foreground, $foreground, $ml);

  @include private.for-each-theme(foreground, (text, disabled-text, divider), $ml, button)
  using ($_, $__, $text, $disabled-text, $divider) {
    .ml-button {
      color: $text;

      @if $disabled-text {
        &.ml-disabled {
          color: $disabled-text !important;
        }
      }
    }
  
    .ml-stroked-button {
      border-color: $divider;
    }
  }
}


@mixin background($background: null, $ml: null) {
  $ml: private.create-ml-map(background, $background, $ml);

  @include private.for-each-theme(background, (raised-button, disabled-button, hovered, focused), $ml, button)
  using ($_, $config, $raised-button, $disabled-button, $hovered, $focused) {
    .ml-filled-button {
      background-color: $raised-button;
  
      @if $disabled-button {
        &.ml-disabled {
          background-color: $disabled-button !important;
        }
      }
    }

    @if $hovered {
      $is-color: meta.type-of($hovered) == color;

      @if $is-color and not map.get($config, button, hovered, current-color)  {
        .ml-filled-button {
          .ml-button-hover {
            background-color: rgb(color.red($hovered), color.green($hovered), color.blue($hovered));
          }
        }
      }

      .ml-hoverable-button:hover .ml-button-hover {
        $opacity: if($is-color, color.opacity($hovered), cdk.$hovered-opacity);
        opacity: $opacity;
      }
    }

    @if $focused {
      $is-color: meta.type-of($focused) == color;

      @if $is-color and not map.get($config, button, focused, current-color) {
        .ml-filled-button {
          .ml-button-focus {
            background-color: rgb(color.red($focused), color.green($focused), color.blue($focused));
          }
        }
      }

      .ml-button {
        $opacity: if($is-color, color.opacity($focused), cdk.$focused-opacity);
        @include utils.focus-visible($opacity, '.ml-button-focus');
      }
    }
  }
}


@mixin color($color: null, $ml: null) {
  $ml: private.create-ml-map(color, $color, $ml);

  @include private.for-each-theme-color((default, default-contrast), $ml, button)
  using ($_, $__, $name, $default, $default-contrast) {
    .ml-simple-button {
      &.ml-#{$name} {
        color: $default;
      }
    }

    .ml-filled-button {
      &.ml-#{$name} {
        background-color: $default;
        color: $default-contrast;
      }
    }
  }
}


$default-config: (
  hovered: (
    // current-color: false, (omitted)
    transition-duration: faster,
    transition-timing-function: strong-acceleration
  ),
  focused: (
    // current-color: false, (omitted)
    transition-duration: fast,
    transition-timing-function: strong-acceleration
  )
);
@mixin config($config: null, $ml: null) {
  $ml: private.create-ml-map(config, $config, $ml);

  @include private.for-each-theme-config(
    (button, hovered), (transition-duration, transition-timing-function),
    (button: $default-config), $ml, button) using ($_, $__, $duration, $timing-function
  ) {
    .ml-button-hover {
      transition-duration: cdk.transition-duration($duration);
      transition-timing-function: cdk.transition-timing-function($timing-function);
    }
  }

  @include private.for-each-theme-config(
    (button, focused), (transition-duration, transition-timing-function),
    (button: $default-config), $ml, button
  ) using ($_, $__, $duration, $timing-function) {
    .ml-button-focus {
      transition-duration: cdk.transition-duration($duration);
      transition-timing-function: cdk.transition-timing-function($timing-function);
    } 
  }

  @include private-elevation.zone(null, null, $ml, button) using ($color, $opacity) {
    .ml-raised-button {
      .ml-button-overlay {
        $z-index: cdk.$z-index-resting-contained-button;
        @include cdk.elevation($z-index, $color, $opacity);
      }

      &:active .ml-button-overlay {
        $z-index: cdk.$z-index-pressed-contained-button;
        @include cdk.elevation($z-index, $color, $opacity);
      }
    }

    .ml-fab {
      .ml-button-overlay {
        $z-index: cdk.$z-index-resting-fab;
        @include cdk.elevation($z-index, $color, $opacity);
      }

      &:active .ml-button-overlay {
        $z-index: cdk.$z-index-pressed-fab;
        @include cdk.elevation($z-index, $color, $opacity);
      }
    }
  }

  @include private-elevation.transition-zone(null, null, $ml, button) using ($duration, $timing-function) {
    .ml-raised-button, .ml-fab {
      .ml-button-overlay {
        transition: box-shadow $duration $timing-function;
      }
    }
  }
}


@mixin theme($theme: null, $ml: null) {
  $theme: private.component-theme-init($theme);
  @include foreground(map.get($theme, foreground), $ml);
  @include background(map.get($theme, background), $ml);
  @include color(map.get($theme, color), $ml);

  @include config(map.get($theme, config), $ml);
  // $typography: typography.get-typography($theme);
}
